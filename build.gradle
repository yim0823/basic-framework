plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java-library' // QueryDsl for gradle 6
    id 'java'
    id 'checkstyle'
}

group = 'com.stove.ipd'
version = '0.0.1'
sourceCompatibility = '11'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    compile.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenCentral()
}

// Profile
bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}

// QueryDsl
sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // OAuth2 with Security
//    implementation 'org.springframework.cloud:spring-cloud-starter-security:2.1.2.RELEASE'
//    implementation 'org.springframework.cloud:spring-cloud-starter-oauth2:2.1.2.RELEASE'

    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Swagger
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"

    // Undertow
    implementation 'org.springframework.boot:spring-boot-starter-undertow'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'com.h2database:h2:1.4.197'

    // MariaDB
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.4.1'
    implementation 'mysql:mysql-connector-java:8.0.16'

    // In-memory DB
    runtimeOnly 'com.h2database:h2'

    // DBCP
    implementation 'org.apache.tomcat:tomcat-jdbc:9.0.22'
    compile 'commons-io:commons-io:2.6'

    // QueryDSL
    api(
            "com.querydsl:querydsl-jpa:4.2.1",
    )

    annotationProcessor(
            platform("org.springframework.boot:spring-boot-dependencies:2.2.6.RELEASE"),
            "org.projectlombok:lombok:1.18.6",
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:4.2.1:jpa"
    )

    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.2.6.RELEASE'
    implementation 'de.codecentric:spring-boot-admin-starter-client:2.2.3'
    // Prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus:1.3.6'

    // Apache HttpClient
    implementation 'org.apache.httpcomponents:httpclient:4.5.9'

    // JWT (Json Web Token)
//    implementation 'org.springframework.security:spring-security-jwt'
//    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // Envers
    implementation 'org.springframework.data:spring-data-envers:2.3.0.RELEASE'
    implementation 'org.glassfish.jaxb:jaxb-runtime'

    // Lombok
    compileOnly 'org.projectlombok:lombok'

    // For parsing Json
    implementation 'com.jayway.jsonpath:json-path:2.4.0'
    // JSON parser + JSON generator
    implementation 'com.alibaba:fastjson:1.2.62'
    //  - For serializing LocalDate, LocalTime, LocalDateTime
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'

    // Gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    // Guava
    implementation 'com.google.guava:guava:28.2-jre'

    implementation 'org.apache.commons:commons-lang3:3.9'

    // AccessLog Filter
    implementation 'org.apache.commons:commons-lang3:3.9'

    // AOP
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Zipkin - Log Tracer
//    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth:2.2.2.RELEASE'
//    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin:2.2.2.RELEASE'
//    implementation 'org.springframework.kafka:spring-kafka:2.2.7.RELEASE'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.5.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.5.0'
    testCompile "org.mockito:mockito-core:2.+"
    testCompile 'org.mockito:mockito-junit-jupiter:2.23.4'

    // Scheduler test
    testCompile 'org.awaitility:awaitility:4.0.2'
}

test {
    useJUnitPlatform()
}

// CheckStyle 적용
checkstyle {
    toolVersion '8.28'
    configFile file("${project.rootDir}/gradle/config/checkstyle/checkstyle.xml")
    sourceSets = [sourceSets.main]
    checkstyleMain {
        setExcludes(new HashSet(['**/domain/**/Q**']))
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}
